import java.util.ArrayList;
import java.util.List;
import java.math.BigDecimal;

public class Account {
    private final String firstName;
    private final String lastName;
    private BigDecimal balance;
    private static int uid = 0;
    private final PhoneNumber phoneNumber;
    private final int id;

    public Account(String firstName, String lastName, PhoneNumber phoneNumber) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.phoneNumber = phoneNumber;
        this.balance = BigDecimal.ZERO;
        uid++;
        this.id = uid;
    }

    public String getFirstName() {
        return this.firstName;
    }

    public String getLastName() {
        return this.lastName;
    }

    public BigDecimal getBalance() {
        return this.balance;
    }

    public void depositMoney(BigDecimal depositAmount) {
        this.balance = this.balance.add(depositAmount);
        System.out.println("You have deposited " + depositAmount + " to your account." + 
                "\n" + "Balance is now: " + this.balance);
    }

    public void withdrawal(BigDecimal withdrawalAmount) throws NegativeAmountException {
        if (withdrawalAmount.compareTo(BigDecimal.ZERO) < 0) {
            throw new NegativeAmountException("Withdrawal amount cannot be negative.");
        }
        if (this.balance.compareTo(withdrawalAmount) < 0) {
            System.out.println("You don't have enough funds.");
        } else {
            this.balance = this.balance.subtract(withdrawalAmount);
            System.out.println("You have withdrawn " + withdrawalAmount + " from your account." + 
                    "\n" + "Balance is now: " + this.balance);
        }
    }
}

public class HotelReservationSystem {
    private List<Room> rooms;
    private List<Booking> bookings;

    public HotelReservationSystem() {
        this.rooms = new ArrayList<>();
        this.bookings = new ArrayList<>();
    }

    public void addRoom(Room room) {
        this.rooms.add(room);
    }

    public List<Room> searchAvailableRooms(String checkInDate, String checkOutDate) {
        List<Room> availableRooms = new ArrayList<>();
        for (Room room : this.rooms) {
            if (room.isAvailable(checkInDate, checkOutDate)) {
                availableRooms.add(room);
            }
        }
        return availableRooms;
    }

    public void makeReservation(Account account, Room room, String checkInDate, String checkOutDate) throws NegativeAmountException, UnknownAccountException {
        if (account == null) {
            throw new UnknownAccountException("Unknown account.");
        }
        BigDecimal amountToPay = room.getPrice().multiply(BigDecimal.valueOf(room.getNumberOfNights(checkInDate, checkOutDate)));
        account.withdrawal(amountToPay);
        Booking booking = new Booking(account, room, checkInDate, checkOutDate);
        this.bookings.add(booking);
        System.out.println("Reservation made successfully.");
    }

    public List<Booking> getBookings(Account account) {
        List<Booking> accountBookings = new ArrayList<>();
        for (Booking booking : this.bookings) {
            if (booking.getAccount().equals(account)) {
                accountBookings.add(booking);
            }
        }
        return accountBookings;
    }
}
